'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createDecoratedClass = (function () { function defineProperties(target, descriptors, initializers) { for (var i = 0; i < descriptors.length; i++) { var descriptor = descriptors[i]; var decorators = descriptor.decorators; var key = descriptor.key; delete descriptor.key; delete descriptor.decorators; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor || descriptor.initializer) descriptor.writable = true; if (decorators) { for (var f = 0; f < decorators.length; f++) { var decorator = decorators[f]; if (typeof decorator === 'function') { descriptor = decorator(target, key, descriptor) || descriptor; } else { throw new TypeError('The decorator for method ' + descriptor.key + ' is of the invalid type ' + typeof decorator); } } if (descriptor.initializer !== undefined) { initializers[key] = descriptor; continue; } } Object.defineProperty(target, key, descriptor); } } return function (Constructor, protoProps, staticProps, protoInitializers, staticInitializers) { if (protoProps) defineProperties(Constructor.prototype, protoProps, protoInitializers); if (staticProps) defineProperties(Constructor, staticProps, staticInitializers); return Constructor; }; })();

var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require('react');

var _reactDom = require('react-dom');

var _reactPassthrough = require('react-passthrough');

var _reactPassthrough2 = _interopRequireDefault(_reactPassthrough);

var _reactCallbackRegister = require('react-callback-register');

var _reactCallbackRegister2 = _interopRequireDefault(_reactCallbackRegister);

var _constants = require('./constants');

var _util = require('./util');

var _behaviors = require('./behaviors');

var behaviors = _interopRequireWildcard(_behaviors);

// We only need to know if *tab* is pressed, not *where* it was pressed - so
// set up a variable which all controls can reference.
var tabPressed = false;
try {
  window.addEventListener('keydown', function (e) {
    if (e.keyCode == _constants.KeyCodes.TAB) {
      tabPressed = true;
    }
  });
  window.addEventListener('keyup', function (e) {
    tabPressed = false;
  });
} catch (e) {
  // No window object. Probably using node.js?
}

function controllable() {
  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var _ref$keyBehaviors = _ref.keyBehaviors;
  var keyBehaviors = _ref$keyBehaviors === undefined ? {} : _ref$keyBehaviors;
  var _ref$passthrough = _ref.passthrough;
  var passthroughOptions = _ref$passthrough === undefined ? {} : _ref$passthrough;

  return function decorator(component) {
    var _passthroughOptions$force, _passthroughOptions$omit;

    // Assign default key behaviors
    keyBehaviors = Object.assign({ ESC: 'cancel' }, keyBehaviors);

    var keyCodeBehaviors = new Map();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = Object.entries(keyBehaviors)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = _slicedToArray(_step.value, 2);

        var key = _step$value[0];
        var behavior = _step$value[1];

        if (behavior) {
          (0, _invariant2['default'])(_constants.KeyCodes[key] !== undefined, "Properties in `keyBehaviors` (${$key}) must be valid key names");
          (0, _invariant2['default'])(behaviors[behavior], "${$key}'s behavior (${behavior}) must be a valid behavior");

          keyCodeBehaviors.set(_constants.KeyCodes[key], behavior);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    (0, _util.confirmUndefined)(component.prototype, 'property', ['controlState', 'target', 'focusable', 'shell']);

    // There are some attributes we always want to be passed through to the
    // focusable element, even if specified in propTypes
    if (!passthroughOptions.force) passthroughOptions.force = [];
    (_passthroughOptions$force = passthroughOptions.force).push.apply(_passthroughOptions$force, _toConsumableArray(_constants.FormProps));

    if (!passthroughOptions.omit) passthroughOptions.omit = ['children'];
    (_passthroughOptions$omit = passthroughOptions.omit).push.apply(_passthroughOptions$omit, _toConsumableArray(_constants.StyleProps));

    var decorated = (function (_component) {
      _inherits(decorated, _component);

      function decorated() {
        _classCallCheck(this, _decorated);

        _get(Object.getPrototypeOf(_decorated.prototype), 'constructor', this).apply(this, arguments);

        this.__controllableState = {
          active: false,
          beacon: false,
          hover: false,
          acting: false,
          selecting: false,
          disabled: !!this.props.disabled
        };
      }

      _createDecoratedClass(decorated, [{
        key: 'target',

        /*
         * Interface for extended class
         */

        value: function target() {
          // Return callbacks which need to be applied to the touch/mouse
          // target area, even if this is larger than the focusable component
          var result = Object.assign({ ref: 'target' }, this.callbacks);
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = _constants.FocusableCallbacks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var _event = _step2.value;

              delete result[_event];
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                _iterator2['return']();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          return result;
        }
      }, {
        key: 'focusable',
        value: function focusable() {
          // Return callbacks which must be applied to the focusable element,
          // as well as any unknown properties
          var result = Object.assign({ ref: 'focusable' }, this.passthrough());
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = _constants.FocusableCallbacks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _event2 = _step3.value;

              result[_event2] = this.callbacks[_event2];
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                _iterator3['return']();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          return result;
        }
      }, {
        key: 'shell',
        value: function shell() {
          // Pass through style-related props
          var result = { ref: 'shell' };
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            for (var _iterator4 = _constants.StyleProps[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var prop = _step4.value;

              result[prop] = this.props[prop];
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4['return']) {
                _iterator4['return']();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }

          return result;
        }
      }, {
        key: '__setControl',
        value: function __setControl() {
          var control = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

          if (this.controlWillUpdate) {
            this.controlWillUpdate(control);
          }

          this.__controllableState = Object.assign({}, this.__controllableState, control);

          if (this.props.onControl) {
            this.props.onControl(this.__controllableState);
          }

          this.forceUpdate();
        }

        /*
         * Lifecycle methods
         */

      }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
          var node = (0, _reactDom.findDOMNode)(this.refs.focusable);
          if (node) this.__controllableForm = node.form;
          if (_get(Object.getPrototypeOf(_decorated.prototype), 'componentDidMount', this)) _get(Object.getPrototypeOf(_decorated.prototype), 'componentDidMount', this).call(this);
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          if (_get(Object.getPrototypeOf(_decorated.prototype), 'componentWillUnmount', this)) _get(Object.getPrototypeOf(_decorated.prototype), 'componentWillUnmount', this).call(this);
          delete this.__controllableForm;
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(newProps) {
          if (_get(Object.getPrototypeOf(_decorated.prototype), 'componentWillReceiveProps', this)) _get(Object.getPrototypeOf(_decorated.prototype), 'componentWillReceiveProps', this).call(this, newProps);
          if (newProps.disabled != this.props.disabled) {
            this.__setControl({
              disabled: newProps.disabled,
              beacon: false,
              acting: false,
              selecting: false,
              hover: false
            });
          }
        }

        /*
         * Event handlers
         */

      }, {
        key: '__handleKeyDown',
        decorators: [_reactCallbackRegister2['default'].on('keyDown')],
        value: function __handleKeyDown(e) {
          var behavior = keyCodeBehaviors.get(e.keyCode);
          if (behavior) this['__' + behavior + 'Down'](e);
        }
      }, {
        key: '__handleKeyUp',
        decorators: [_reactCallbackRegister2['default'].on('keyUp')],
        value: function __handleKeyUp(e) {
          var behavior = keyCodeBehaviors.get(e.keyCode);
          if (behavior) this['__' + behavior + 'Up'](e);
        }
      }, {
        key: '_startSelect',
        decorators: [_reactCallbackRegister2['default'].on('mouseDown', 'touchStart')],
        value: function _startSelect(e) {
          if (e.button === 0 || e.button === undefined) {
            this.__selectAndActDown(e);
          }
        }
      }, {
        key: '__endSelect',
        decorators: [_reactCallbackRegister2['default'].on('mouseUp', 'mouseOut', 'touchEnd')],
        value: function __endSelect(e) {
          this.__selectAndActUp(e);
        }
      }, {
        key: '__startHover',
        decorators: [_reactCallbackRegister2['default'].on('mouseEnter')],
        value: function __startHover(e) {
          if (!this.controlState.disabled) {
            this.__setControl({ hover: true });
          }
        }
      }, {
        key: '__endHover',
        decorators: [_reactCallbackRegister2['default'].on('mouseLeave')],
        value: function __endHover(e) {
          if (this.controlState.selecting) {
            this.__cancelDown(e);
          } else {
            this.__setControl({ hover: false });
          }
        }
      }, {
        key: '__handleBlur',
        decorators: [_reactCallbackRegister2['default'].on('blur')],
        value: function __handleBlur(e) {
          this.__setControl({ beacon: false, active: false });
        }
      }, {
        key: '__handleFocus',
        decorators: [_reactCallbackRegister2['default'].on('focus')],
        value: function __handleFocus(e) {
          this.__setControl(tabPressed ? { active: true, beacon: true } : { active: true });
        }
      }, {
        key: 'controlState',
        get: function get() {
          return this.__controllableState;
        }

        /*
         * Manage control state
         */

      }], [{
        key: 'displayName',

        // Set displayName so the component doesn't come through as
        // `decoratedComponent` in React error messages
        value: component.displayName || component.name,

        // Make sure we have an `onControl` propType so it will be skipped by the
        // passthrough decorator
        enumerable: true
      }, {
        key: 'propTypes',
        value: Object.assign({ onControl: _react.PropTypes.func, disabled: _react.PropTypes.bool }, component.propTypes),
        enumerable: true
      }]);

      var _decorated = decorated;
      decorated = (0, _reactCallbackRegister2['default'])(decorated) || decorated;
      decorated = (0, _reactPassthrough2['default'])(passthroughOptions)(decorated) || decorated;
      return decorated;
    })(component);

    // Extend our decorated class's prototype with the various behaviors
    // defined in behaviors.js. This makes it easier to spy on the
    // behavior of the various events in tests.
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = Object.entries(behaviors)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var _step5$value = _slicedToArray(_step5.value, 2);

        var behavior = _step5$value[0];
        var fns = _step5$value[1];

        decorated.prototype['__' + behavior + 'Down'] = fns.down;
        decorated.prototype['__' + behavior + 'Up'] = fns.up;
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5['return']) {
          _iterator5['return']();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    return decorated;
  };
}

controllable.on = _reactCallbackRegister2['default'].on;

exports['default'] = controllable;
module.exports = exports['default'];