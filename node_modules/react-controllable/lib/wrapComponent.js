'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

exports['default'] = wrapComponent;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _constants = require('./constants');

// Create wrapper component to hide our component state via context

function wrapComponent(extendedComponent) {
  return (function (_Component) {
    _inherits(ControlWrapper, _Component);

    function ControlWrapper() {
      _classCallCheck(this, ControlWrapper);

      _get(Object.getPrototypeOf(ControlWrapper.prototype), 'constructor', this).apply(this, arguments);

      this.state = {
        active: false,
        beacon: false,
        hover: false,
        acting: false,
        selecting: null,
        disabled: !!this.props.disabled
      };
    }

    _createClass(ControlWrapper, [{
      key: 'getChildContext',
      value: function getChildContext() {
        return {
          controlState: this.state,
          setControlState: this.setState.bind(this)
        };
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(newProps) {
        if (newProps.disabled != this.props.disabled) {
          this.setState({ disabled: newProps.disabled });
        }
      }
    }, {
      key: 'render',
      value: function render() {
        return (0, _react.createElement)(extendedComponent, this.props, this.props.children);
      }
    }], [{
      key: 'propTypes',
      value: {
        disabled: _react.PropTypes.bool
      },
      enumerable: true
    }, {
      key: 'childContextTypes',
      value: {
        controlState: _constants.ControlStateShape,
        setControlState: _react.PropTypes.func
      },
      enumerable: true
    }]);

    return ControlWrapper;
  })(_react.Component);
}

module.exports = exports['default'];