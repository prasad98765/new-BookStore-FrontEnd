// Do: acting -> true, beacon -> false/null
// Exceptions: do nothing on no primary action or disabled
// Example usage: spacebar on <Toggle>, enter/space on <Button>
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var act = {
  down: function down(e) {
    if (this.controlPrimaryAction && !this.controlState.disabled) {
      this.__setControl({
        acting: true,
        beacon: this.controlState.beacon || this.controlState.beacon === null ? null : false
      });
    }
  },
  up: function up(e) {
    if (this.controlPrimaryAction) {
      if (this.controlState.acting == true && !this.controlState.disabled) {
        this.controlPrimaryAction(e);
      }

      this.__setControl({
        acting: false,
        beacon: this.controlState.beacon || this.controlState.beacon === null
      });
    }
  }
};

exports.act = act;
// Do: selecting -> {x, y}, beacon -> false, acting -> true
// Exceptions: do nothing when disabled, don't update acting when nothing to do
// Example usage: click on *
var selectAndAct = {
  down: function down(e) {
    if (!this.controlState.disabled) {
      this.__setControl({
        acting: !!this.controlPrimaryAction,
        beacon: false,
        selecting: {
          x: e.pageX === undefined ? e.nativeEvent.pageX : e.pageX,
          y: e.pageY === undefined ? e.nativeEvent.pageY : e.pageY
        }
      });
    }
  },
  up: function up(e) {
    if (this.controlPrimaryAction && this.controlState.acting == true && !this.controlState.disabled) {
      this.controlPrimaryAction(e);
    }

    this.__setControl({
      acting: false,
      selecting: false
    });
  }
};

exports.selectAndAct = selectAndAct;
// When form,    do: * -> false, submit form
// When no form, do: act()
// Example usage: enter on <Input>
// Note: not appropriate for submit buttons: they should manually submit
//       the form as a primary action (and probably then disable it)
var submitOrAct = {
  down: function down(e) {
    if (this.__controllableForm) {
      if (!this.controlState.disabled) {
        e.preventDefault();
        e.stopPropagation();
        this.__setControl({
          beacon: false,
          selecting: false,
          acting: false
        });
        this.__controllableForm.dispatchEvent(new Event('submit'));
      }
    } else {
      this.__actDown(e);
    }
  },
  up: function up(e) {
    if (!this.__controllableForm) {
      this.__actUp(e);
    }
  }
};

exports.submitOrAct = submitOrAct;
var cancel = {
  down: function down(e) {
    this.__setControl({
      beacon: false,
      selecting: false,
      acting: false,
      hover: false
    });
  },
  up: function up(e) {}
};
exports.cancel = cancel;