import TestUtils from 'react-addons-test-utils'
import {KeyCodes} from '../src/constants'
import {renderToContext, pressWindowKey, releaseWindowKey, itChangesState, itTransitionsOn, itDoesNotTransitionOn} from './util'


describe("component with {ENTER: submitOrAct}:", function() {
  beforeEach(function() {
    renderToContext(this, {options: {keyBehaviors: {ENTER: 'submitOrAct'}}})
  })

  it('pressing ENTER runs appropriate behavior', function() {
    this.component.__submitOrActDown = sinon.spy()
    TestUtils.Simulate.keyDown(this.focusable, {keyCode: KeyCodes.ENTER})
    assert(this.component.__submitOrActDown.called)
  })

  it('releasing ENTER runs appropriate behavior', function() {
    this.component.__submitOrActUp = sinon.spy()
    TestUtils.Simulate.keyUp(this.focusable, {keyCode: KeyCodes.ENTER})
    assert(this.component.__submitOrActUp.called)
  })
})


describe("component with {SPACE: act}:", function() {
  beforeEach(function() {
    renderToContext(this, {options: {keyBehaviors: {SPACE: 'act'}}})
  })

  it('pressing SPACE runs appropriate behavior', function() {
    this.component.__actDown = sinon.spy()
    TestUtils.Simulate.keyDown(this.focusable, {keyCode: KeyCodes.SPACE})
    assert(this.component.__actDown.called)
  })

  it('releasing SPACE runs appropriate behavior', function() {
    this.component.__actUp = sinon.spy()
    TestUtils.Simulate.keyUp(this.focusable, {keyCode: KeyCodes.SPACE})
    assert(this.component.__actUp.called)
  })
})


describe("component with {ESC: false}:", function() {
  beforeEach(function() {
    renderToContext(this, {options: {keyBehaviors: {ESC: false}}})
  })

  itDoesNotTransitionOn('pressing ESC', function() {
    TestUtils.Simulate.keyDown(this.focusable, {keyCode: KeyCodes.ESC})
  })

  itDoesNotTransitionOn('releasing ESC', function() {
    TestUtils.Simulate.keyUp(this.focusable, {keyCode: KeyCodes.ESC})
  })
})


describe("disabled component:", function() {
  beforeEach(function() {
    renderToContext(this, {props: {disabled: true}})
  })

  it("does not enable `hover` when hovering mouse", function() {
    this.component.__setControl({hover: false})
    TestUtils.Simulate.mouseEnter(this.target)
    expect(this.component.controlState.hover).to.equal(false)
  })
})


describe("default component:", function() {
  beforeEach(function() {
    renderToContext(this)
  })

  it('runs cancel behavior when ESC is pressed', function() {
    this.component.__cancelDown = sinon.spy()
    TestUtils.Simulate.keyDown(this.focusable, {keyCode: KeyCodes.ESC})
    assert(this.component.__cancelDown.called)
  })

  itTransitionsOn('receiving focus with tab pressed', function() {
    pressWindowKey(KeyCodes.TAB)
    TestUtils.Simulate.focus(this.focusable)
    releaseWindowKey(KeyCodes.TAB)
  }, {
    from: {beacon: false, active: false},
    to: {beacon: true, active: true},
  })

  itTransitionsOn('receiving focus without tab pressed', function() { 
      TestUtils.Simulate.focus(this.focusable)
    }, {
    from: {beacon: false, active: false},
    to: {beacon: false, active: true},
  })

  describe('blurring', function() {
    beforeEach(function() {
      pressWindowKey(KeyCodes.TAB)
      TestUtils.Simulate.focus(this.focusable)
      releaseWindowKey(KeyCodes.TAB)
      TestUtils.Simulate.blur(this.focusable)
    })

    itChangesState({
      beacon: false,
      active: false,
    })
  })

  itDoesNotTransitionOn('right clicking', function() {
    TestUtils.Simulate.keyUp(this.target, {button: 2})
  })

  it("enables `hover` when hovering mouse", function() {
    this.component.__setControl({hover: false})
    TestUtils.Simulate.mouseEnter(this.target)
    expect(this.component.controlState.hover).to.equal(true)
  })

  it('runs cancel behavior on unhovering mouse while selecting', function() {
    this.component.__cancelDown = sinon.spy()
    this.component.__setControl({selecting: true})
    TestUtils.Simulate.mouseLeave(this.target)
    assert(this.component.__cancelDown.called)
  })

  itTransitionsOn('unhovering mouse while not selecting', function() {
    TestUtils.Simulate.mouseLeave(this.target)
  }, {
    from: {selecting: false, hover: true, acting: true, focus: true},
    to: {selecting: false, hover: false, acting: true, focus: true},
  })

  it('runs selectAndAct behavior on left click', function() {
    this.component.__selectAndActDown = sinon.spy()
    TestUtils.Simulate.mouseDown(this.target, {button: 0, pageX: 1, pageY: 2})
    assert(this.component.__selectAndActDown.called)
  })

  it('runs selectAndAct behavior on releasing click', function() {
    this.component.__selectAndActUp = sinon.spy()
    TestUtils.Simulate.mouseUp(this.target)
    assert(this.component.__selectAndActUp.called)
  })

  it('runs selectAndAct behavior on touch', function() {
    this.component.__selectAndActDown = sinon.spy()
    TestUtils.Simulate.touchStart(this.target)
    assert(this.component.__selectAndActDown.called)
  })

  it('runs selectAndAct behavior on untouch', function() {
    this.component.__selectAndActUp = sinon.spy()
    TestUtils.Simulate.touchEnd(this.target)
    assert(this.component.__selectAndActUp.called)
  })

  itDoesNotTransitionOn('pressing ENTER', function() {
    TestUtils.Simulate.keyDown(this.focusable, {keyCode: KeyCodes.ENTER})
  })

  itDoesNotTransitionOn('releasing ENTER', function() {
    TestUtils.Simulate.keyUp(this.focusable, {keyCode: KeyCodes.ENTER})
  })

  itDoesNotTransitionOn('pressing SPACE', function() {
    TestUtils.Simulate.keyDown(this.focusable, {keyCode: KeyCodes.SPACE})
  })

  itDoesNotTransitionOn('releasing SPACE', function() {
    TestUtils.Simulate.keyUp(this.focusable, {keyCode: KeyCodes.SPACE})
  })
})
