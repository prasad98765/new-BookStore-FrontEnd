import {renderToContext, itTransitionsOn, itDoesNotTransitionOn} from '../util'


describe("default component:", function() {
  beforeEach(function() {
    renderToContext(this)
  })

  itTransitionsOn('act down while beacon is true', function() {
    this.component.__actDown()
  }, {
    from: {acting: false, selecting: false, beacon: true},
    to: {acting: true, selecting: false, beacon: null},
  })

  itTransitionsOn('act down while beacon is false', function() {
    this.component.__actDown()
  }, {
    from: {acting: false, selecting: false, beacon: false},
    to: {acting: true, selecting: false, beacon: false},
  })

  itTransitionsOn('act up while beacon is false', function() {
    this.component.__actUp()
  }, {
    from: {beacon: false, acting: true},
    to: {beacon: false, acting: false},
  })

  itTransitionsOn('act up while beacon is null', function() {
    this.component.__actUp()
  }, {
    from: {beacon: null, acting: true},
    to: {beacon: true, acting: false},
  })

  it('runs primary action on act up while acting is true', function() {
    this.component.controlPrimaryAction = sinon.spy()
    this.component.__setControl({acting: true})
    this.component.__actUp()
    assert(this.component.controlPrimaryAction.called)
  })

  it('does not run primary action on act up while acting is false', function() {
    this.component.controlPrimaryAction = sinon.spy()
    this.component.__setControl({acting: false})
    this.component.__actUp()
    assert(!this.component.controlPrimaryAction.called)
  })
})


describe('component without primary action:', function() {
  beforeEach(function() {
    renderToContext(this, {componentClass: 'WithoutPrimaryAction'})
  })

  itTransitionsOn('act down', function() {
    this.component.__actDown()
  }, {
    from: {acting: false, beacon: true},
    to: {acting: false, beacon: true},
  })
})


describe('disabled component with primary action', function() {
  beforeEach(function() {
    renderToContext(this, {props: {disabled: true}})
  })

  itTransitionsOn('act down', function() {
    this.component.__actDown()
  }, {
    from: {acting: false},
    to: {acting: false},
  })

  itTransitionsOn('act up while acting', function() {
    this.component.__actUp()
  }, {
    from: {acting: true},
    to: {acting: false},
  })

  it('does not run primary action on act up while acting is true', function() {
    this.component.controlPrimaryAction = sinon.spy()
    this.component.__setControl({acting: true})
    this.component.__actUp()
    assert(!this.component.controlPrimaryAction.called)
  })
})
