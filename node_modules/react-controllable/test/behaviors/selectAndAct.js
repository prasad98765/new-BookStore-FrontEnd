import {renderToContext, itTransitionsOn, itDoesNotTransitionOn} from '../util'


describe("default component:", function() {
  beforeEach(function() {
    renderToContext(this)
  })

  itTransitionsOn('selectAndAct down', function() {
    this.component.__selectAndActDown({button: 0, pageX: 1, pageY: 2})
  }, {
    from: {acting: false, selecting: false, beacon: true},
    to: {acting: true, selecting: {x: 1, y: 2}, beacon: false},
  })

  it('releasing selectAndAct when acting is false', function() {
    this.component.controlPrimaryAction = sinon.spy()
    this.component.__setControl({acting: false})
    this.component.__selectAndActUp()
    assert(!this.component.controlPrimaryAction.called)
  })

  it('releasing selectAndAct when acting is true', function() {
    this.component.controlPrimaryAction = sinon.spy()
    this.component.__setControl({acting: true})
    this.component.__selectAndActUp()
    assert(this.component.controlPrimaryAction.called)
  })

  itTransitionsOn('releasing selectAndAct', function() {
    this.component.__selectAndActUp()
  }, {
    from: {acting: true, selecting: true},
    to: {acting: false, selecting: false},
  })
})


describe('component without primary action:', function() {
  beforeEach(function() {
    renderToContext(this, {componentClass: 'WithoutPrimaryAction'})
  })

  itTransitionsOn('selectAndAct down', function() {
    this.component.__selectAndActDown({button: 0, pageX: 1, pageY: 2})
  }, {
    from: {acting: false, beacon: true, selecting: false},
    to: {acting: false, beacon: false, selecting: {x: 1, y: 2}},
  })
})


describe('disabled component with primary action', function() {
  beforeEach(function() {
    renderToContext(this, {props: {disabled: true}})
  })

  itTransitionsOn('selectAndAct down', function() {
    this.component.__selectAndActDown({button: 0, pageX: 1, pageY: 2})
  }, {
    from: {acting: false, selecting: false},
    to: {acting: false, selecting: false},
  })

  it('does not run primary action on release selectAndAct while acting is true', function() {
    this.component.controlPrimaryAction = sinon.spy()
    this.component.__setControl({acting: true})
    this.component.__selectAndActDown({button: 0, pageX: 1, pageY: 2})
    assert(!this.component.controlPrimaryAction.called)
  })
})
