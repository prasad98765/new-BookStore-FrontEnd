import {fakeEvent, renderToContext, itTransitionsOn, itDoesNotTransitionOn} from '../util'


describe("component with <form> ancestor:", function() {
  beforeEach(function() {
    renderToContext(this, {form: true})
  })

  itTransitionsOn('selectAndAct down', function() {
    this.component.__submitOrActDown(fakeEvent())
  }, {
    from: {acting: false, selecting: false, beacon: true},
    to: {acting: false, selecting: false, beacon: false},
  })

  it('calls submit on submitOrAct down', function() {
    this.component.__submitOrActDown(fakeEvent())
    assert(this.onSubmit.called)
  })

  it('does not run controlPrimaryAction on submitOrAct up', function() {
    this.component.controlPrimaryAction = sinon.spy()
    this.component.__setControl({acting: true})
    this.component.__submitOrActUp()
    assert(!this.component.controlPrimaryAction.called)
  })
})


describe("disabled component with <form> ancestor:", function() {
  beforeEach(function() {
    renderToContext(this, {form: true, props: {disabled: true}})
  })

  it('does not call submit on submitOrAct down', function() {
    this.component.__submitOrActDown(fakeEvent())
    assert(!this.onSubmit.called)
  })
})


describe("component with no <form> ancestor:", function() {
  beforeEach(function() {
    renderToContext(this)
  })

  it('runs actDown behavior on submitOrActDown', function() {
    this.component.__actDown = sinon.spy()
    this.component.__submitOrActDown(fakeEvent())
    assert(this.component.__actDown.called)
  })

  it('runs actUp behavior on submitOrActUp', function() {
    this.component.__actUp = sinon.spy()
    this.component.__submitOrActUp()
    assert(this.component.__actUp.called)
  })
})
